{"moduleFile":{"sourceFilePath":"/Users/steveruiz/GitHub/st-lookbook/src/components/lb-look/lb-look.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"lb-look","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/steveruiz/GitHub/st-lookbook/src/components/lb-look/lb-look.css","cmpRelativePath":"lb-look.css","originalComponentPath":"lb-look.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"LbLook","documentation":"","type":"typeof LbLook"},"encapsulation":0,"componentClass":"LbLook","membersMeta":{"values":{"memberType":5},"look":{"memberType":1,"attribName":"look","attribType":{"text":"Function","typeReferences":{"Function":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"look","documentation":"","type":"Function"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/steveruiz/GitHub/st-lookbook/src/components/lb-look/lb-look.js"},"jsText":"export class LbLook {\r\n    constructor() {\r\n        this.values = {};\r\n        this.inputs = [];\r\n        this.knobs = [];\r\n        this.notes = [];\r\n        // Set a value for the inputs\r\n        this.setValue = (key, value) => {\r\n            let change = {};\r\n            change[key] = value;\r\n            let newValues = Object.assign({}, this.values, change);\r\n            this.values = newValues;\r\n        };\r\n        // get a value (existing or initial)\r\n        this.getValue = (label, initial) => {\r\n            if (this.values[label] === undefined) {\r\n                this.values[label] = initial;\r\n            }\r\n            return this.values[label];\r\n        };\r\n        // Knobs\r\n        // Add a knob\r\n        this.addKnob = (label, input) => {\r\n            this.knobs.push([h(\"label\", { class: \"label\" }, label), input]);\r\n        };\r\n        // Add a note\r\n        this.addNote = (label, note) => {\r\n            this.notes.push(h(\"div\", { class: \"note-container\" },\r\n                h(\"label\", { class: \"label\" }, label),\r\n                h(\"p\", { class: \"note\" }, note)));\r\n        };\r\n        // Set a text knob\r\n        this.text = (label, initial) => {\r\n            const current = this.getValue(label, initial);\r\n            const input = (h(\"input\", { id: label, type: \"text\", class: \"knob-text\", value: current, onInput: ev => {\r\n                    let target = ev.target;\r\n                    let value = target.value;\r\n                    this.setValue(label, value);\r\n                } }));\r\n            this.addKnob(label, input);\r\n            return current;\r\n        };\r\n        // Set a boolean knob\r\n        this.boolean = (label, initial) => {\r\n            const current = this.getValue(label, initial);\r\n            const input = (h(\"input\", { class: \"knob-checkbox\", id: label, checked: current, type: \"checkbox\", onChange: ev => {\r\n                    let target = ev.target;\r\n                    let value = target.checked;\r\n                    this.setValue(label, value);\r\n                } }));\r\n            this.addKnob(label, input);\r\n            return current;\r\n        };\r\n        // sets a select knob\r\n        this.select = (label, options) => {\r\n            const current = this.getValue(label, options[0]);\r\n            const input = (h(\"select\", { class: \"knob-select\", id: label, onChange: ev => {\r\n                    let target = ev.target;\r\n                    let value = target.value;\r\n                    this.setValue(label, value);\r\n                } }, options.map(i => {\r\n                return h(\"option\", { value: i }, i);\r\n            })));\r\n            this.addKnob(label, input);\r\n            return current;\r\n        };\r\n        // sets a range knob\r\n        this.range = (label, initial, min, max, step = 1) => {\r\n            const current = this.getValue(label, initial);\r\n            const input = [\r\n                h(\"div\", { class: \"knob-range\" },\r\n                    h(\"input\", { type: \"range\", id: label, value: current, min: min, max: max, step: step, onInput: ev => {\r\n                            let target = ev.target;\r\n                            let value = target.value;\r\n                            this.setValue(label, value);\r\n                        } }),\r\n                    h(\"span\", { class: \"label align-right\" }, current))\r\n            ];\r\n            this.addKnob(label, input);\r\n            return current;\r\n        };\r\n        this.note = (note, label) => {\r\n            this.addNote(label, note);\r\n        };\r\n        this.setHTMLStringContent = () => {\r\n            if (!this.stringContent) {\r\n                return;\r\n            }\r\n            console.log(\"so far ok\");\r\n            // this.preview.innerHTML = \"\";\r\n            // this.preview.appendChild(this.stringContent.firstChild);\r\n        };\r\n    }\r\n    // clear notes and knobs before update\r\n    componentWillUpdate() {\r\n        this.knobs = [];\r\n        this.notes = [];\r\n    }\r\n    componentDidLoad() {\r\n        this.setHTMLStringContent();\r\n    }\r\n    componentDidUpdate() {\r\n        this.setHTMLStringContent();\r\n    }\r\n    // Render\r\n    render() {\r\n        let content = this.look(this);\r\n        console.log(content);\r\n        if (typeof content === \"string\") {\r\n            this.stringContent = document\r\n                .createRange()\r\n                .createContextualFragment(content);\r\n            content = null;\r\n        }\r\n        let notes;\r\n        if (this.notes.length > 0) {\r\n            notes = h(\"div\", { class: \"notes\" }, this.notes);\r\n        }\r\n        return [\r\n            h(\"div\", { class: \"preview\", ref: el => {\r\n                    this.preview = el;\r\n                } }, content),\r\n            h(\"div\", { class: \"knobs\" }, this.knobs),\r\n            notes\r\n        ];\r\n    }\r\n    static get is() { return \"lb-look\"; }\r\n    static get properties() { return {\r\n        \"look\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"look\"\r\n        },\r\n        \"values\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:lb-look:**/\"; }\r\n}\r\n"}